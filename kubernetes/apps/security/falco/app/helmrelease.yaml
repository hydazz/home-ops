---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: falco
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: falco
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      falco:
        annotations:
          reloader.stakater.com/auto: "true"
        type: daemonset
        initContainers:
          falcoctl-artifact-install:
            image: &falcoctl
              repository: docker.io/falcosecurity/falcoctl
              tag: 0.11.3@sha256:2c4b5f1b2960eaf3329fea2fcda6689e5f3c62417c933475b7f380f4ef1c89f8
            args:
              - artifact
              - install
              - --log-format=json
        containers:
          app:
            image:
              repository: docker.io/falcosecurity/falco
              tag: 0.41.3@sha256:5f6f325327c970430b1a73704160b2fd5b2c1396f2dc0b343b2544638b6b569c
            args:
              - /usr/bin/falco
            env:
              HOST_ROOT: /host
              FALCO_HOSTNAME: &hostname
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              FALCO_K8S_NODE_NAME: *hostname
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /healthz
                    port: &port 8765
                  initialDelaySeconds: 60
                  timeoutSeconds: 5
                  periodSeconds: 15
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              privileged: true
            resources:
              requests:
                cpu: 100m
                memory: 512Mi
              limits:
                cpu: 1
                memory: 1Gi
          falcoctl-artifact-follow:
            image: *falcoctl
            args:
              - artifact
              - follow
              - --log-format=json
    defaultPodOptions:
      securityContext:
        runAsUser: 0
        runAsGroup: 0
    serviceAccount:
      falco: {}
    service:
      app:
        ports:
          http:
            port: *port
      falco-metrics:
        ports:
          metrics:
            port: *port
      k8saudit-webhook:
        ports:
          http:
            port: 9765
    serviceMonitor:
      app:
        serviceName: falco-metrics
        endpoints:
          - port: metrics
    persistence:
      config:
        type: configMap
        name: falco-configmap
        globalMounts:
          - path: /etc/falco/falco.yaml
            subPath: falco.yaml
            readOnly: true
          - path: /etc/falco/rules.d/rules.yaml
            subPath: rules.yaml
            readOnly: true
          - path: /etc/falcoctl/falcoctl.yaml
            subPath: falcoctl.yaml
            readOnly: true
      containerd-socket:
        type: hostPath
        hostPath: /run/containerd/containerd.sock
        advancedMounts:
          falco:
            app:
              - path: /host/run/containerd/containerd.sock
      host-containerd-socket:
        type: hostPath
        hostPath: /run/host-containerd/containerd.sock
        advancedMounts:
          falco:
            app:
              - path: /host/run/host-containerd/containerd.sock
      proc-fs:
        type: hostPath
        hostPath: /proc
        advancedMounts:
          falco:
            app:
              - path: /host/proc
                readOnly: true
      etc-fs:
        type: hostPath
        hostPath: /etc
        advancedMounts:
          falco:
            app:
              - path: /host/etc
                readOnly: true
      plugins:
        type: emptyDir
        advancedMounts:
          falco:
            app:
              - path: /usr/share/falco/plugins
            falcoctl-artifact-install:
              - path: /plugins
            falcoctl-artifact-follow:
              - path: /plugins
      rules:
        type: emptyDir
        advancedMounts:
          falco:
            app:
              - path: /etc/falco
            falcoctl-artifact-install:
              - path: /rulesfiles
            falcoctl-artifact-follow:
              - path: /rulesfiles
      tmpfs:
        type: emptyDir
        advancedMounts:
          falco:
            app:
              - path: /root/.falco
