---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app falco-sidekick
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: sidekick
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      falco-sidekick:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: docker.io/falcosecurity/falcosidekick
              tag: 2.31.1
            env:
              DEBUG: "false"
              #ALERTMANAGER_HOSTPORT: "http://kube-prometheus-stack-alertmanager.observability.svc.cluster.local:9093"
              #ALERTMANAGER_ENDPOINT: "/api/v2/alerts"
              #ALERTMANAGER_DROPEVENTDEFAULTPRIORITY: "critical"
              #ALERTMANAGER_DROPEVENTTHRESHOLDS: "10000:critical, 1000:critical, 100:critical, 10:warning, 1:warning"
              #ALERTMANAGER_MINIMUMPRIORITY: "warning"
              #ALERTMANAGER_MUTUALTLS: "false"
              #ALERTMANAGER_CHECKCERT: "true"
              WEBUI_URL: "http://{{ .Release.Name }}-ui:2802"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &port 2801
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 100m
                memory: 256Mi
              limits:
                memory: 512Mi
        serviceAccount:
          falco-sidekick: {}
      ui:
        containers:
          app:
            image:
              repository: docker.io/falcosecurity/falcosidekick-ui
              tag: 2.2.0
            args:
              - -r
              - localhost:6379
              - -l
              - info
            envFrom:
              - secretRef:
                  name: falco-ui-secret
            probes:
              liveness: &uiProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v1/healthz
                    port: &uiPort 2802
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *uiProbes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 256Mi
          # Can't use UI with dragonfly
          redis:
            image:
              repository: docker.io/redis/redis-stack
              tag: 7.2.0-v11
            probes:
              liveness: &redisProbes
                enabled: true
                custom: true
                spec:
                  tcpSocket:
                    port: 6379
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 2
                  failureThreshold: 3
              readiness: *redisProbes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 128Mi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
    rbac:
      roles:
        falco-sidekick:
          type: Role
          rules:
            - apiGroups:
                - ""
              resources:
                - endpoints
              verbs:
                - get
      bindings:
        falco-sidekick-rolebinding:
          type: RoleBinding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            identifier: falco-sidekick
          subjects:
            - kind: ServiceAccount
              identifier: *app
              namespace: security
    service:
      app:
        controller: *app
        annotations:
          prometheus.io/scrape: "true"
        ports:
          http:
            port: *port
      ui:
        controller: ui
        ports:
          http:
            port: *uiPort
    route:
      app:
        hostnames:
          - "falco.${D_HS}"
        parentRefs:
          - name: envoy-internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: ui
                port: *uiPort
