---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
# Account 1:
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name hydaz-com-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.hydaz.com,hydaz.com"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: hydaz.com
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
# Account 2:
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name hyde-services-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.hyde.services,hyde.services"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: hyde.services
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
          reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
          reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: mailserver
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name ${D_HCA//./-}-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.${D_HCA},${D_HCA}"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: ${D_HCA}
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name imagegenius-io-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.imagegenius.io,imagegenius.io"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: imagegenius.io
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name ${D_SN//./-}-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.${D_SN},${D_SN}"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: ${D_SN}
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name ${D_TACA//./-}-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.${D_TACA},${D_TACA}"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: ${D_TACA}
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name ${D_TAN//./-}-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.${D_TAN},${D_TAN}"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: ${D_TAN}
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/external-secrets.io/externalsecret_v1.json
# Account 3:
apiVersion: external-secrets.io/v1
kind: ExternalSecret
metadata:
  name: &name ${D_LMVCA//./-}-tls
spec:
  refreshPolicy: CreatedOnce
  secretStoreRef:
    kind: ClusterSecretStore
    name: onepassword
  target:
    name: *name
    creationPolicy: Orphan
    template:
      type: kubernetes.io/tls
      metadata:
        annotations:
          cert-manager.io/alt-names: "*.${D_LMVCA},${D_LMVCA}"
          cert-manager.io/certificate-name: *name
          cert-manager.io/common-name: ${D_LMVCA}
          cert-manager.io/ip-sans: ""
          cert-manager.io/issuer-group: ""
          cert-manager.io/issuer-kind: ClusterIssuer
          cert-manager.io/issuer-name: letsencrypt-production
          cert-manager.io/uri-sans: ""
        labels:
          controller.cert-manager.io/fao: "true"
  dataFrom:
    - extract:
        key: *name
        decodingStrategy: Base64
